// ÂºïÂÖ•ÂøÖË¶ÅÁöÑÂ∫ì
const express = require('express');
require('dotenv').config(); // Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè

// ÂàõÂª∫ Express Â∫îÁî®
const app = express();

// --- vvvvvv Âú®ËøôÈáåËøõË°å‰øÆÊîπ vvvvvv ---
// Â¢ûÂä† JSON Âíå URL-encoded ËØ∑Ê±Ç‰ΩìÁöÑÂ§ßÂ∞èÈôêÂà∂ÔºåÊØîÂ¶ÇÂ¢ûÂä†Âà∞ 50mb
// ËøôÊòØËß£ÂÜ≥ "PayloadTooLargeError" ÁöÑÂÖ≥ÈîÆ
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
// --- ^^^^^^ ‰øÆÊîπÁªìÊùü ^^^^^^ ---

// ÂõæÁâáÈìæÊé•ËΩ¨Êç¢ÂáΩÊï∞
function convertImageUrl(originalUrl) {
  try {
    // ‰ªéR2ÈìæÊé•‰∏≠ÊèêÂèñÊñá‰ª∂Âêç
    // ‰æãÂ¶Ç: https://jubili.8a668a21c563ade0c297bd2404377b9a.r2.cloudflarestorage.com/1750039195939-7rB5Yl9_f2.jpg
    // ÊèêÂèñ: 1750039195939-7rB5Yl9_f2
    
    const url = new URL(originalUrl);
    const pathname = url.pathname; // /1750039195939-7rB5Yl9_f2.jpg
    const filename = pathname.substring(1); // ÂéªÊéâÂºÄÂ§¥ÁöÑ /
    const filenameWithoutExt = filename.replace(/\.(jpg|jpeg|png|gif|webp)$/i, ''); // ÂéªÊéâÊâ©Â±ïÂêç
    
    // ÊûÑÂª∫Êñ∞ÁöÑÂõæÁâáÊúçÂä°ÈìæÊé•
    const convertedUrl = `https://tupian.image123.pro/${filenameWithoutExt}.jpg`;
    
    return convertedUrl;
  } catch (error) {
    console.error('Error converting image URL:', error);
    return originalUrl; // Â¶ÇÊûúËΩ¨Êç¢Â§±Ë¥•ÔºåËøîÂõûÂéüÂßãURL
  }
}

// --- Â∑•‰∫∫ÁöÑ‰∏ªÂÖ•Âè£ ---
app.post('/process-image', (req, res) => {
  const { taskId, prompt, imageUrl } = req.body;

  // Êó•Âøó1ÔºöÁ°ÆËÆ§Êî∂Âà∞ Vercel ÁöÑËØ∑Ê±Ç
  console.log(`\n\n--- [${taskId}] NEW TASK RECEIVED ---`);
  console.log(`[${taskId}] [INFO] üì° Received prompt: "${prompt}"`);
  
  // ËÆ∞ÂΩïÊé•Êî∂Âà∞ÁöÑÂõæÁâáÈìæÊé•
  if (imageUrl) {
    console.log(`[${taskId}] [INFO] üñºÔ∏è Received original image URL: ${imageUrl}`);
  }

  // Á´ãÂàªÂìçÂ∫î VercelÔºåÂëäËØâÂÆÉ"‰ªªÂä°ÊàëÊî∂Âà∞‰∫ÜÔºÅ"
  res.status(200).send({ message: 'Task accepted and is being processed.' });

  // Âú®ÂêéÂè∞ÂºÇÊ≠•ÊâßË°åÁúüÊ≠£ÁöÑËÄóÊó∂‰ªªÂä°
  processImageGeneration(taskId, prompt, imageUrl);
});

// --- ÁúüÊ≠£ÁöÑ AI Â§ÑÁêÜÂáΩÊï∞ ---
async function processImageGeneration(taskId, prompt, imageUrl = null) {
  // Êó•Âøó2ÔºöÊâìÂç∞Âá∫Â∞ÜË¶Å‰ΩøÁî®ÁöÑÁéØÂ¢ÉÂèòÈáèÂíåÂèÇÊï∞ÔºàÂØÜÈí•ÂÅöÊé©Á†ÅÂ§ÑÁêÜÔºâ
  const apiKey = process.env.YUNWU_API_KEY;
  const apiKeyForDisplay = apiKey ? `sk-.......${apiKey.slice(-4)}` : "Êú™ÂÆö‰πâ(undefined)";
  
  console.log(`--- [${taskId}] DEBUG INFO ---`);
  console.log(`[${taskId}] [DEBUG] Model to be used: 'gpt-4o-image-vip'`);
  console.log(`[${taskId}] [DEBUG] API Key being used (masked): ${apiKeyForDisplay}`);
  console.log(`[${taskId}] [DEBUG] Has image URL: ${imageUrl ? 'Yes' : 'No'}`);
  console.log(`--- [${taskId}] END DEBUG INFO ---`);

  try {
    // ÊûÑÂª∫Ê∂àÊÅØÂÜÖÂÆπ
    let messageContent;
    let finalImageUrl = null;
    
    if (imageUrl) {
      // üî• ÂÖ≥ÈîÆÔºöËΩ¨Êç¢ÂõæÁâáÈìæÊé•
      finalImageUrl = convertImageUrl(imageUrl);
      
      console.log(`[${taskId}] [CONVERT] üîÑ Image URL conversion:`);
      console.log(`[${taskId}] [CONVERT] Original: ${imageUrl}`);
      console.log(`[${taskId}] [CONVERT] Converted: ${finalImageUrl}`);
      
      // ===== üî• ÈáçÁÇπÔºöÊâìÂç∞Âç≥Â∞ÜÂèëÈÄÅÁªôAIÁöÑÂõæÁâáÈìæÊé• üî• =====
      console.log(`\n======== [${taskId}] üöÄ SENDING TO AI üöÄ ========`);
      console.log(`[${taskId}] [SEND_TO_AI] üì§ About to send the following image URL to AI service:`);
      console.log(`[${taskId}] [SEND_TO_AI] ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è IMAGE URL BEING SENT TO AI ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è`);
      console.log(finalImageUrl);
      console.log(`[${taskId}] [SEND_TO_AI] ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è END OF IMAGE URL BEING SENT TO AI ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è`);
      console.log(`======== [${taskId}] üöÄ END SENDING TO AI üöÄ ========\n`);
      
      // ÊûÑÂª∫ÂåÖÂê´ÂõæÁâáÁöÑÊ∂àÊÅØ
      messageContent = [
        {
          type: "text",
          text: prompt
        },
        {
          type: "image_url",
          image_url: {
            url: finalImageUrl
          }
        }
      ];
    } else {
      // Á∫ØÊñáÊú¨Ê∂àÊÅØ
      messageContent = prompt;
    }

    // ÂáÜÂ§áË¶ÅÂèëÈÄÅÁªô AI ÁöÑÊï∞ÊçÆÂåÖ (Payload)
    const aiPayload = {
      model: "gpt-4o-image-vip",
      messages: [
        {
          role: "user",
          content: messageContent
        }
      ]
    };

    console.log(`[${taskId}] [AI CALL] ÊúÄÁªàÁ°ÆËÆ§ÁöÑËØ∑Ê±ÇÊï∞ÊçÆ:`);
    console.log(JSON.stringify(aiPayload, null, 2));

    // Êó•Âøó3ÔºöÂáÜÂ§áË∞ÉÁî®Â§ñÈÉ® API
    console.log(`[${taskId}] [INFO] ‚û°Ô∏è Calling yunwu.ai API...`);
    
    const response = await fetch("https://yunwu.ai/v1/chat/completions", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify(aiPayload)
    });

    if (!response.ok) {
      const errorBody = await response.text();
      console.error(`[${taskId}] [ERROR] AI ÊúçÂä°ËøîÂõû‰∫ÜÈîôËØØÔºåÁä∂ÊÄÅÁ†Å: ${response.status}:`, errorBody);
      throw new Error(`AI service responded with status ${response.status}`);
    }

    // Êó•Âøó4ÔºöÂ§ñÈÉ® API Ë∞ÉÁî®ÊàêÂäü
    console.log(`[${taskId}] [SUCCESS] ‚úÖ yunwu.ai API responded with status: ${response.status}`);

    const aiResult = await response.json();
    console.log(`[${taskId}] [AI CALL] ÊàêÂäüÊî∂Âà∞ AI ËøîÂõûÁöÑÁªìÊûú„ÄÇ`);
    
    const content = aiResult.choices[0].message.content;
    
    console.log(`[${taskId}] [DEBUG] Full AI response content:`, content);
    
    // Êó•Âøó5ÔºöÂáÜÂ§áËß£ÊûêËøîÂõûÁªìÊûú
    console.log(`[${taskId}] [INFO] üß† Parsing response content...`);
    const match = content.match(/!\[.*?\]\((https:\/\/filesystem\.site.*?)\)/);

    if (!match || !match[1]) {
        throw new Error('Could not parse image URL from AI response. No match found.');
    }
    const resultImageUrl = match[1];  // ÈáçÂëΩÂêçÂèòÈáèÈÅøÂÖç‰∏éÂèÇÊï∞ÂÜ≤Á™Å
    console.log(`[${taskId}] [SUCCESS] ‚úÖ Image URL parsed successfully.`);

    // Êó•Âøó6ÔºöÂáÜÂ§áÂõûË∞É Vercel Webhook
    console.log(`[${taskId}] [INFO] ‚Ü™Ô∏è Notifying Vercel with 'completed' status...`);
    await notifyVercel(taskId, 'completed', { resultUrl: resultImageUrl });

  } catch (error) {
    // Êó•Âøó7ÔºöÊçïËé∑Âà∞‰ªª‰ΩïÁéØËäÇÁöÑÈîôËØØ
    console.error(`[${taskId}] [ERROR] ‚ùå An error occurred during processing!`);
    console.error(`[${taskId}] [ERROR] Error message:`, error.message);
    console.error(`[${taskId}] [ERROR] Error details:`, error);
    
    await notifyVercel(taskId, 'failed', { error: error.message });
  }
}

// Êñ∞Â¢ûÔºö‰∏ìÈó®Áî®‰∫éË∞ÉËØïÂèëÈÄÅÁªôAIÁöÑÂõæÁâáÈìæÊé•ÁöÑÁ´ØÁÇπ
app.post('/debug-send-to-ai', (req, res) => {
  const { imageUrl, prompt = "ËØ∑ÂàÜÊûêËøôÂº†ÂõæÁâá" } = req.body;
  const taskId = `DEBUG_${Date.now()}`;
  
  console.log(`\n\n--- [${taskId}] DEBUG: SIMULATE SENDING TO AI ---`);
  
  if (imageUrl) {
    // ËΩ¨Êç¢ÂõæÁâáÈìæÊé•
    const convertedUrl = convertImageUrl(imageUrl);
    
    console.log(`[${taskId}] [DEBUG] Image URL conversion:`);
    console.log(`[${taskId}] [DEBUG] Original: ${imageUrl}`);
    console.log(`[${taskId}] [DEBUG] Converted: ${convertedUrl}`);
    
    // üî• ÈáçÁÇπÔºöÊ®°ÊãüÂèëÈÄÅÁªôAIÁöÑËøáÁ®ãÔºåÊâìÂç∞ÂõæÁâáÈìæÊé•
    console.log(`\n======== [${taskId}] üöÄ SIMULATING SEND TO AI üöÄ ========`);
    console.log(`[${taskId}] [SIMULATION] üì§ This is what would be sent to AI service:`);
    console.log(`[${taskId}] [SIMULATION] Prompt: "${prompt}"`);
    console.log(`[${taskId}] [SIMULATION] ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è IMAGE URL THAT WOULD BE SENT TO AI ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è`);
    console.log(convertedUrl);
    console.log(`[${taskId}] [SIMULATION] ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è END OF IMAGE URL THAT WOULD BE SENT TO AI ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è`);
    console.log(`======== [${taskId}] üöÄ END SIMULATION üöÄ ========\n`);
    
    res.json({ 
      success: true, 
      message: 'Ê®°ÊãüÂèëÈÄÅÁªôAIÁöÑÂõæÁâáÈìæÊé•Â∑≤ÊâìÂç∞Âà∞ÊéßÂà∂Âè∞',
      taskId,
      originalUrl: imageUrl,
      convertedUrl: convertedUrl,
      prompt
    });
  } else {
    console.log(`[${taskId}] [ERROR] No image URL received for simulation`);
    res.status(400).json({ 
      success: false, 
      message: 'No imageUrl data provided for simulation' 
    });
  }
});

// Êñ∞Â¢ûÔºöÊµãËØïÂõæÁâáÈìæÊé•ËΩ¨Êç¢ÁöÑÁ´ØÁÇπ
app.post('/test-convert-url', (req, res) => {
  const { imageUrl } = req.body;
  
  if (!imageUrl) {
    return res.status(400).json({
      success: false,
      message: 'imageUrl is required'
    });
  }
  
  const convertedUrl = convertImageUrl(imageUrl);
  
  console.log(`[URL_CONVERT] Original: ${imageUrl}`);
  console.log(`[URL_CONVERT] Converted: ${convertedUrl}`);
  
  res.json({
    success: true,
    originalUrl: imageUrl,
    convertedUrl: convertedUrl
  });
});

// --- ÈÄöÁü• Vercel ÁöÑÂáΩÊï∞ ---
async function notifyVercel(taskId, status, data) {
    const webhookUrl = process.env.VERCEL_WEBHOOK_URL;
    const secret = process.env.WORKER_SECRET;

    if (!webhookUrl || !secret) {
        console.error(`[${taskId}] [FATAL] VERCEL_WEBHOOK_URL or WORKER_SECRET is not defined. Cannot notify Vercel.`);
        return;
    }

    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-worker-secret': secret
            },
            body: JSON.stringify({
                taskId,
                status,
                ...data
            })
        });

        if (!response.ok) {
            const errorBody = await response.text();
            console.error(`[${taskId}] [ERROR] ‚ùå Failed to notify Vercel. Status: ${response.status}, Body:`, errorBody);
        } else {
            console.log(`[${taskId}] [SUCCESS] ‚úÖ Successfully notified Vercel with status: ${status}`);
        }
    } catch (error) {
        console.error(`[${taskId}] [ERROR] ‚ùå Failed to notify Vercel:`, error.message);
    }
}

// --- ÂêØÂä®ÊúçÂä°Âô® ---
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Worker is listening on port ${PORT}`);
  console.log(`üñºÔ∏è  Main endpoint: POST http://localhost:${PORT}/process-image`);
  console.log(`üîç  Debug endpoint: POST http://localhost:${PORT}/debug-send-to-ai`);
  console.log(`üîÑ  URL convert test: POST http://localhost:${PORT}/test-convert-url`);
  console.log(`\nüìù Usage examples:`);
  console.log(`   curl -X POST http://localhost:${PORT}/process-image -H "Content-Type: application/json" -d '{"taskId":"test123","prompt":"ÂàÜÊûêÂõæÁâá","imageUrl":"https://jubili.8a668a21c563ade0c297bd2404377b9a.r2.cloudflarestorage.com/1750039195939-7rB5Yl9_f2.jpg"}'`);
  console.log(`   curl -X POST http://localhost:${PORT}/debug-send-to-ai -H "Content-Type: application/json" -d '{"imageUrl":"https://jubili.8a668a21c563ade0c297bd2404377b9a.r2.cloudflarestorage.com/1750039195939-7rB5Yl9_f2.jpg"}'`);
  console.log(`   curl -X POST http://localhost:${PORT}/test-convert-url -H "Content-Type: application/json" -d '{"imageUrl":"https://jubili.8a668a21c563ade0c297bd2404377b9a.r2.cloudflarestorage.com/1750039195939-7rB5Yl9_f2.jpg"}'`);
});
